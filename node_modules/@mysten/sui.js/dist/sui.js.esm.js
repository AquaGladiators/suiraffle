import nacl from 'tweetnacl';
import { Buffer as Buffer$1 } from 'buffer';
import BN__default, { BN } from 'bn.js';
import { sha3_256 } from 'js-sha3';
import { TextEncoder } from 'util';
import RpcClient from 'jayson/lib/client/browser';
import fetch from 'cross-fetch';

// Copyright (c) 2022, Mysten Labs, Inc.
var Base64DataBuffer = /*#__PURE__*/function () {
  function Base64DataBuffer(data) {
    if (typeof data === 'string') {
      this.data = new Uint8Array(Buffer$1.from(data, 'base64'));
    } else {
      this.data = data;
    }
  }

  var _proto = Base64DataBuffer.prototype;

  _proto.getData = function getData() {
    return this.data;
  };

  _proto.getLength = function getLength() {
    return this.data.length;
  };

  _proto.toString = function toString() {
    return Buffer$1.from(this.data).toString('base64');
  };

  return Base64DataBuffer;
}();

// Copyright (c) 2022, Mysten Labs, Inc.
var PUBLIC_KEY_SIZE = 32;

function isPublicKeyData(value) {
  return value._bn !== undefined;
}
/**
 * A public key
 */


var PublicKey = /*#__PURE__*/function () {
  /**
   * Create a new PublicKey object
   * @param value ed25519 public key as buffer or base-64 encoded string
   */
  function PublicKey(value) {
    if (isPublicKeyData(value)) {
      this._bn = value._bn;
    } else {
      if (typeof value === 'string') {
        var buffer = Buffer$1.from(value, 'base64');

        if (buffer.length !== 32) {
          throw new Error("Invalid public key input. Expected 32 bytes, got " + buffer.length);
        }

        this._bn = new BN__default(buffer);
      } else {
        this._bn = new BN__default(value);
      }

      if (this._bn.byteLength() > PUBLIC_KEY_SIZE) {
        throw new Error("Invalid public key input");
      }
    }
  }
  /**
   * Checks if two publicKeys are equal
   */


  var _proto = PublicKey.prototype;

  _proto.equals = function equals(publicKey) {
    return this._bn.eq(publicKey._bn);
  }
  /**
   * Return the base-64 representation of the public key
   */
  ;

  _proto.toBase64 = function toBase64() {
    return this.toBuffer().toString('base64');
  }
  /**
   * Return the byte array representation of the public key
   */
  ;

  _proto.toBytes = function toBytes() {
    return this.toBuffer();
  }
  /**
   * Return the Buffer representation of the public key
   */
  ;

  _proto.toBuffer = function toBuffer() {
    var b = this._bn.toArrayLike(Buffer$1);

    if (b.length === PUBLIC_KEY_SIZE) {
      return b;
    }

    var zeroPad = Buffer$1.alloc(PUBLIC_KEY_SIZE);
    b.copy(zeroPad, PUBLIC_KEY_SIZE - b.length);
    return zeroPad;
  }
  /**
   * Return the base-64 representation of the public key
   */
  ;

  _proto.toString = function toString() {
    return this.toBase64();
  }
  /**
   * Return the Sui address associated with this public key
   */
  ;

  _proto.toSuiAddress = function toSuiAddress() {
    var hexHash = sha3_256(this.toBytes());
    var publicKeyBytes = new BN__default(hexHash, 16).toArray(undefined, 32); // Only take the first 20 bytes

    var addressBytes = publicKeyBytes.slice(0, 20);
    return toHexString(addressBytes);
  };

  return PublicKey;
}(); // https://stackoverflow.com/questions/34309988/byte-array-to-hex-string-conversion-in-javascript

function toHexString(byteArray) {
  return byteArray.reduce(function (output, elem) {
    return output + ('0' + elem.toString(16)).slice(-2);
  }, '');
}

// Copyright (c) 2022, Mysten Labs, Inc.
/**
 * An Ed25519 Keypair used for signing transactions.
 */

var Ed25519Keypair = /*#__PURE__*/function () {
  /**
   * Create a new keypair instance.
   * Generate random keypair if no {@link Ed25519Keypair} is provided.
   *
   * @param keypair ed25519 keypair
   */
  function Ed25519Keypair(keypair) {
    if (keypair) {
      this.keypair = keypair;
    } else {
      this.keypair = nacl.sign.keyPair();
    }
  }
  /**
   * Generate a new random keypair
   */


  Ed25519Keypair.generate = function generate() {
    return new Ed25519Keypair(nacl.sign.keyPair());
  }
  /**
   * Create a keypair from a raw secret key byte array.
   *
   * This method should only be used to recreate a keypair from a previously
   * generated secret key. Generating keypairs from a random seed should be done
   * with the {@link Keypair.fromSeed} method.
   *
   * @throws error if the provided secret key is invalid and validation is not skipped.
   *
   * @param secretKey secret key byte array
   * @param options: skip secret key validation
   */
  ;

  Ed25519Keypair.fromSecretKey = function fromSecretKey(secretKey, options) {
    var keypair = nacl.sign.keyPair.fromSecretKey(secretKey);

    if (!options || !options.skipValidation) {
      var encoder = new TextEncoder();
      var signData = encoder.encode('sui validation');
      var signature = nacl.sign.detached(signData, keypair.secretKey);

      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {
        throw new Error('provided secretKey is invalid');
      }
    }

    return new Ed25519Keypair(keypair);
  }
  /**
   * Generate a keypair from a 32 byte seed.
   *
   * @param seed seed byte array
   */
  ;

  Ed25519Keypair.fromSeed = function fromSeed(seed) {
    return new Ed25519Keypair(nacl.sign.keyPair.fromSeed(seed));
  }
  /**
   * The public key for this keypair
   */
  ;

  var _proto = Ed25519Keypair.prototype;

  _proto.getPublicKey = function getPublicKey() {
    return new PublicKey(this.keypair.publicKey);
  }
  /**
   * Return the signature for the provided data.
   */
  ;

  _proto.signData = function signData(data) {
    return new Base64DataBuffer(nacl.sign.detached(data.getData(), this.keypair.secretKey));
  };

  return Ed25519Keypair;
}();

// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////
// Exported Abstracts
var Provider = function Provider() {};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

// Copyright (c) 2022, Mysten Labs, Inc.
function isEd25519KeypairData(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && obj.publicKey instanceof Uint8Array && obj.secretKey instanceof Uint8Array;
}
function isKeypair(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && typeof obj.getPublicKey === "function" && typeof obj.signData === "function";
}
function isPublicKeyInitData(obj, _argumentName) {
  return isTransactionDigest(obj) || isSequenceNumber(obj) || obj instanceof Buffer || obj instanceof Uint8Array || Array.isArray(obj) && obj.every(function (e) {
    return isSequenceNumber(e);
  }) || isPublicKeyData$1(obj);
}
function isPublicKeyData$1(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && obj._bn instanceof BN;
}
function isTransferCoinTransaction(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.signer) && isTransactionDigest(obj.objectId) && isTransactionDigest(obj.gasPayment) && isSequenceNumber(obj.gasBudget) && isTransactionDigest(obj.recipient);
}
function isTxnDataSerializer(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && typeof obj.newTransferCoin === "function";
}
function isTransactionDigest(obj, _argumentName) {
  return typeof obj === "string";
}
function isSuiAddress(obj, _argumentName) {
  return typeof obj === "string";
}
function isObjectOwner(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.AddressOwner) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.ObjectOwner) || obj === "Shared" || obj === "Immutable";
}
function isObjectRef(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.digest) && isTransactionDigest(obj.objectId) && isSequenceNumber(obj.version);
}
function isObjectContentField(obj, _argumentName) {
  return isTransactionDigest(obj) || isSequenceNumber(obj) || obj === false || obj === true || Array.isArray(obj) && obj.every(function (e) {
    return isSequenceNumber(e);
  }) || isObjectContent(obj) || Array.isArray(obj) && obj.every(function (e) {
    return isObjectContent(e);
  });
}
function isObjectContentFields(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && Object.entries(obj).every(function (_ref) {
    var key = _ref[0],
        value = _ref[1];
    return isObjectContentField(value) && isTransactionDigest(key);
  });
}
function isObjectContent(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isObjectContentFields(obj.fields) && isTransactionDigest(obj.type);
}
function isMovePackageContent(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && Object.entries(obj).every(function (_ref2) {
    var key = _ref2[0],
        value = _ref2[1];
    return isTransactionDigest(value) && isTransactionDigest(key);
  });
}
function isSuiObject(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && (isObjectContent(obj.contents) || isMovePackageContent(obj.contents)) && isObjectOwner(obj.owner) && isTransactionDigest(obj.tx_digest);
}
function isObjectExistsInfo(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isObjectRef(obj.objectRef) && isObjectType(obj.objectType) && isSuiObject(obj.object);
}
function isObjectNotExistsInfo(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.objectId);
}
function isObjectStatus(obj, _argumentName) {
  return obj === "Exists" || obj === "NotExists" || obj === "Deleted";
}
function isObjectType(obj, _argumentName) {
  return obj === "moveObject" || obj === "movePackage";
}
function isGetOwnedObjectRefsResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && Array.isArray(obj.objects) && obj.objects.every(function (e) {
    return isObjectRef(e);
  });
}
function isGetObjectInfoResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isObjectStatus(obj.status) && (isObjectRef(obj.details) || isObjectExistsInfo(obj.details) || isObjectNotExistsInfo(obj.details));
}
function isObjectDigest(obj, _argumentName) {
  return typeof obj === "string";
}
function isObjectId(obj, _argumentName) {
  return typeof obj === "string";
}
function isSequenceNumber(obj, _argumentName) {
  return typeof obj === "number";
}
function isRawObjectRef(obj, _argumentName) {
  return Array.isArray(obj) && isTransactionDigest(obj[0]) && isSequenceNumber(obj[1]) && isTransactionDigest(obj[2]);
}
function isTransfer(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.recipient) && isRawObjectRef(obj.object_ref);
}
function isRawAuthoritySignInfo(obj, _argumentName) {
  return Array.isArray(obj) && isTransactionDigest(obj[0]) && isTransactionDigest(obj[1]);
}
function isTransactionKindName(obj, _argumentName) {
  return obj === "Transfer" || obj === "Publish" || obj === "Call";
}
function isSingleTransactionKind(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransfer(obj.Transfer) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isMoveModulePublish(obj.Publish) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isMoveCall(obj.Call);
}
function isTransactionKind(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isSingleTransactionKind(obj.Single) || (obj !== null && typeof obj === "object" || typeof obj === "function") && Array.isArray(obj.Batch) && obj.Batch.every(function (e) {
    return isSingleTransactionKind(e);
  });
}
function isTransactionData(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionKind(obj.kind) && isTransactionDigest(obj.sender) && isRawObjectRef(obj.gas_payment) && isSequenceNumber(obj.gas_budget);
}
function isEpochId(obj, _argumentName) {
  return typeof obj === "number";
}
function isAuthorityQuorumSignInfo(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isSequenceNumber(obj.epoch) && Array.isArray(obj.signatures) && obj.signatures.every(function (e) {
    return isRawAuthoritySignInfo(e);
  });
}
function isCertifiedTransaction(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionData(obj.data) && isTransactionDigest(obj.tx_signature) && isAuthorityQuorumSignInfo(obj.auth_sign_info);
}
function isGasCostSummary(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isSequenceNumber(obj.computation_cost) && isSequenceNumber(obj.storage_cost) && isSequenceNumber(obj.storage_rebate);
}
function isExecutionStatusType(obj, _argumentName) {
  return obj === "Success" || obj === "Failure";
}
function isExecutionStatus(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isExecutionStatusDetail(obj.Success) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isExecutionStatusDetail(obj.Failure);
}
function isExecutionStatusDetail(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isGasCostSummary(obj.gas_cost);
}
function isOwnedObjectRef(obj, _argumentName) {
  return Array.isArray(obj) && isRawObjectRef(obj[0]) && isObjectOwner(obj[1]);
}
function isTransactionEffects(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isExecutionStatus(obj.status) && Array.isArray(obj.shared_objects) && obj.shared_objects.every(function (e) {
    return isRawObjectRef(e);
  }) && isTransactionDigest(obj.transaction_digest) && Array.isArray(obj.created) && obj.created.every(function (e) {
    return isOwnedObjectRef(e);
  }) && Array.isArray(obj.mutated) && obj.mutated.every(function (e) {
    return isOwnedObjectRef(e);
  }) && Array.isArray(obj.unwrapped) && obj.unwrapped.every(function (e) {
    return isOwnedObjectRef(e);
  }) && Array.isArray(obj.deleted) && obj.deleted.every(function (e) {
    return isRawObjectRef(e);
  }) && Array.isArray(obj.wrapped) && obj.wrapped.every(function (e) {
    return isRawObjectRef(e);
  }) && isOwnedObjectRef(obj.gas_object) && Array.isArray(obj.events) && obj.events.every(function (e) {
    return isEvent(e);
  }) && Array.isArray(obj.dependencies) && obj.dependencies.every(function (e) {
    return isTransactionDigest(e);
  });
}
function isTransactionEffectsResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isCertifiedTransaction(obj.certificate) && isTransactionEffects(obj.effects);
}
function isGatewayTxSeqNumber(obj, _argumentName) {
  return typeof obj === "number";
}
function isGetTxnDigestsResponse(obj, _argumentName) {
  return Array.isArray(obj) && obj.every(function (e) {
    return Array.isArray(e) && isSequenceNumber(e[0]) && isTransactionDigest(e[1]);
  });
}
function isMoveModulePublish(obj, _argumentName) {
  return obj !== null && typeof obj === "object" || typeof obj === "function";
}
function isEvent(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isStructTag(obj.type_) && isTransactionDigest(obj.contents);
}
function isStructTag(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.address) && isTransactionDigest(obj.module) && isTransactionDigest(obj.name) && Array.isArray(obj.type_args) && obj.type_args.every(function (e) {
    return isMoveTypeTag(e);
  });
}
function isMoveTypeTag(obj, _argumentName) {
  return obj === "bool" || obj === "u8" || obj === "u64" || obj === "u128" || obj === "address" || obj === "signer" || (obj !== null && typeof obj === "object" || typeof obj === "function") && Array.isArray(obj.vector) && obj.vector.every(function (e) {
    return isMoveTypeTag(e);
  }) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isStructTag(obj.struct);
}
function isMoveCall(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isRawObjectRef(obj["package"]) && isTransactionDigest(obj.module) && isTransactionDigest(obj["function"]) && Array.isArray(obj.type_arguments) && obj.type_arguments.every(function (e) {
    return isMoveTypeTag(e);
  }) && Array.isArray(obj.arguments) && obj.arguments.every(function (e) {
    return isMoveCallArg(e);
  });
}
function isMoveCallArg(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && Array.isArray(obj.Pure) && obj.Pure.every(function (e) {
    return isSequenceNumber(e);
  }) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isRawObjectRef(obj.ImmOrOwnedObject) || (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.SharedObject);
}
function isEmptySignInfo(obj, _argumentName) {
  return typeof obj === "object";
}
function isAuthorityName(obj, _argumentName) {
  return typeof obj === "string";
}
function isAuthoritySignature(obj, _argumentName) {
  return typeof obj === "string";
}
function isTransactionBytes(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.tx_bytes);
}
function isTransactionResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionEffectsResponse(obj.EffectResponse);
}
function isSignedTransaction(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && isTransactionDigest(obj.tx_bytes) && isTransactionDigest(obj.signature) && isTransactionDigest(obj.pub_key);
}

// Copyright (c) 2022, Mysten Labs, Inc.
function isValidResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && obj.jsonrpc === "2.0" && isTransactionDigest(obj.id);
}
function isErrorResponse(obj, _argumentName) {
  return (obj !== null && typeof obj === "object" || typeof obj === "function") && obj.jsonrpc === "2.0" && isTransactionDigest(obj.id) && (obj.error !== null && typeof obj.error === "object" || typeof obj.error === "function") && isTransactionDigest(obj.error.message);
}

var JsonRpcClient = /*#__PURE__*/function () {
  function JsonRpcClient(url, httpHeaders) {
    this.rpcClient = this.createRpcClient(url, httpHeaders);
  }

  var _proto = JsonRpcClient.prototype;

  _proto.createRpcClient = function createRpcClient(url, httpHeaders) {
    var client = new RpcClient( /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(request, callback) {
        var options, res, text;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = {
                  method: 'POST',
                  body: request,
                  headers: Object.assign({
                    'Content-Type': 'application/json'
                  }, httpHeaders || {})
                };
                _context.prev = 1;
                _context.next = 4;
                return fetch(url, options);

              case 4:
                res = _context.sent;
                _context.next = 7;
                return res.text();

              case 7:
                text = _context.sent;

                if (res.ok) {
                  callback(null, text);
                } else {
                  callback(new Error(res.status + " " + res.statusText + ": " + text));
                }

                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context["catch"](1);
                if (_context.t0 instanceof Error) callback(_context.t0);

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[1, 11]]);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }(), {});
    return client;
  };

  _proto.requestWithType = /*#__PURE__*/function () {
    var _requestWithType = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(method, args, isT) {
      var response;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.request(method, args);

            case 2:
              response = _context2.sent;

              if (!isErrorResponse(response)) {
                _context2.next = 7;
                break;
              }

              throw new Error("RPC Error: " + response.error.message);

            case 7:
              if (!isValidResponse(response)) {
                _context2.next = 13;
                break;
              }

              if (!isT(response.result)) {
                _context2.next = 12;
                break;
              }

              return _context2.abrupt("return", response.result);

            case 12:
              throw new Error("RPC Error: result not of expected type. Result received was: " + JSON.stringify(response.result));

            case 13:
              throw new Error("Unexpected RPC Response: " + response);

            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function requestWithType(_x3, _x4, _x5) {
      return _requestWithType.apply(this, arguments);
    }

    return requestWithType;
  }();

  _proto.request = /*#__PURE__*/function () {
    var _request = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(method, args) {
      var _this = this;

      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", new Promise(function (resolve, reject) {
                _this.rpcClient.request(method, args, function (err, response) {
                  if (err) {
                    reject(err);
                    return;
                  }

                  resolve(response);
                });
              }));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function request(_x6, _x7) {
      return _request.apply(this, arguments);
    }

    return request;
  }();

  _proto.batchRequestWithType = /*#__PURE__*/function () {
    var _batchRequestWithType = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(requests, isT) {
      var responses, validResponses;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.batchRequest(requests);

            case 2:
              responses = _context4.sent;
              // TODO: supports other error modes such as throw or return
              validResponses = responses.filter(function (response) {
                return isValidResponse(response) && isT(response.result);
              });
              return _context4.abrupt("return", validResponses.map(function (response) {
                return response.result;
              }));

            case 5:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function batchRequestWithType(_x8, _x9) {
      return _batchRequestWithType.apply(this, arguments);
    }

    return batchRequestWithType;
  }();

  _proto.batchRequest = /*#__PURE__*/function () {
    var _batchRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(requests) {
      var _this2 = this;

      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              return _context5.abrupt("return", new Promise(function (resolve, reject) {
                // Do nothing if requests is empty
                if (requests.length === 0) resolve([]);
                var batch = requests.map(function (params) {
                  return _this2.rpcClient.request(params.method, params.args);
                });

                _this2.rpcClient.request(batch, function (err, response) {
                  if (err) {
                    reject(err);
                    return;
                  }

                  resolve(response);
                });
              }));

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    function batchRequest(_x10) {
      return _batchRequest.apply(this, arguments);
    }

    return batchRequest;
  }();

  return JsonRpcClient;
}();

// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

/* ---------------------------- Helper functions ---------------------------- */
function getObjectExistsResponse(resp) {
  return resp.status !== 'Exists' ? undefined : resp.details;
}
function getObjectType(resp) {
  var _getObjectExistsRespo;

  return (_getObjectExistsRespo = getObjectExistsResponse(resp)) == null ? void 0 : _getObjectExistsRespo.objectType;
}
function getObjectContent(resp) {
  var existsInfo = getObjectExistsResponse(resp);

  if (existsInfo == null) {
    return undefined;
  }

  var object = existsInfo.object,
      objectType = existsInfo.objectType;
  return objectType === 'moveObject' ? object.contents : undefined;
}
function getMovePackageContent(resp) {
  var existsInfo = getObjectExistsResponse(resp);

  if (existsInfo == null) {
    return undefined;
  }

  var object = existsInfo.object,
      objectType = existsInfo.objectType;
  return objectType === 'movePackage' ? object.contents : undefined;
}

/**
 * Simplifies the common Move Object Content. This will be implemented
 * in the Gateway server level after DevNet.
 */

function transformGetObjectInfoResponse(resp) {
  var content = getObjectContent(resp);

  if (content != null) {
    resp.details.object.contents = transformObjectContent(content);
  }

  return resp;
}
function transformObjectContent(input) {
  var fields = {};
  Object.entries(input.fields).forEach(function (_ref) {
    var key = _ref[0],
        value = _ref[1];

    if (!isObjectContent(value)) {
      fields[key] = value;
      return;
    }

    var parsers = [BalanceTransformer, StringTransformer, UniqueIDTransformer];
    var isTransformed = false;

    for (var _i = 0, _parsers = parsers; _i < _parsers.length; _i++) {
      var p = _parsers[_i];

      if (p.canTransform(value)) {
        fields[key] = p.toFieldValue(value);
        isTransformed = true;
        break;
      }
    }

    if (!isTransformed) {
      fields[key] = transformObjectContent(value);
    }
  });
  return {
    fields: fields,
    type: input.type
  };
}

var MoveObjectContentTransformer = /*#__PURE__*/function () {
  function MoveObjectContentTransformer() {}

  MoveObjectContentTransformer.toFieldValue = function toFieldValue(_input) {
    throw new Error('Children classes must override');
  };

  MoveObjectContentTransformer.canTransform = function canTransform(_input) {
    throw new Error('Children classes must override');
  };

  return MoveObjectContentTransformer;
}();

var StringTransformer = /*#__PURE__*/function (_MoveObjectContentTra) {
  _inheritsLoose(StringTransformer, _MoveObjectContentTra);

  function StringTransformer() {
    return _MoveObjectContentTra.apply(this, arguments) || this;
  }

  StringTransformer.toFieldValue = function toFieldValue(input) {
    var bytes = input.fields['bytes'];

    switch (input.type) {
      case '0x1::ASCII::String':
        return bytes.map(function (n) {
          return String.fromCharCode(n);
        }).join('');

      case '0x2::UTF8::String':
        return stringFromUTF8Array(new Uint8Array(bytes));
    }

    return input;
  };

  StringTransformer.canTransform = function canTransform(input) {
    return input.type === '0x2::UTF8::String' || input.type === '0x1::ASCII::String';
  };

  return StringTransformer;
}(MoveObjectContentTransformer);

var UniqueIDTransformer = /*#__PURE__*/function (_MoveObjectContentTra2) {
  _inheritsLoose(UniqueIDTransformer, _MoveObjectContentTra2);

  function UniqueIDTransformer() {
    return _MoveObjectContentTra2.apply(this, arguments) || this;
  }

  UniqueIDTransformer.toFieldValue = function toFieldValue(input) {
    if (UniqueIDTransformer.canTransform(input)) {
      return input.fields['id'].fields['bytes'];
    }

    return input;
  };

  UniqueIDTransformer.canTransform = function canTransform(input) {
    return input.type === '0x2::ID::UniqueID' && isObjectContent(input.fields['id']) && input.fields['id'].type === '0x2::ID::ID';
  };

  return UniqueIDTransformer;
}(MoveObjectContentTransformer);

var BalanceTransformer = /*#__PURE__*/function (_MoveObjectContentTra3) {
  _inheritsLoose(BalanceTransformer, _MoveObjectContentTra3);

  function BalanceTransformer() {
    return _MoveObjectContentTra3.apply(this, arguments) || this;
  }

  BalanceTransformer.toFieldValue = function toFieldValue(input) {
    if (BalanceTransformer.canTransform(input)) {
      return input.fields['value'];
    }

    return input;
  };

  BalanceTransformer.canTransform = function canTransform(input) {
    return input.type.startsWith('0x2::Balance::Balance');
  };

  return BalanceTransformer;
}(MoveObjectContentTransformer); // from https://weblog.rogueamoeba.com/2017/02/27/javascript-correctly-converting-a-byte-array-to-a-utf-8-string/


function stringFromUTF8Array(data) {
  var extraByteMap = [1, 1, 1, 1, 2, 2, 3, 0];
  var count = data.length;
  var str = '';

  for (var index = 0; index < count;) {
    var ch = data[index++];

    if (ch & 0x80) {
      var extra = extraByteMap[ch >> 3 & 0x07];
      if (!(ch & 0x40) || !extra || index + extra > count) return null;
      ch = ch & 0x3f >> extra;

      for (; extra > 0; extra -= 1) {
        var chx = data[index++];
        if ((chx & 0xc0) != 0x80) return null;
        ch = ch << 6 | chx & 0x3f;
      }
    }

    str += String.fromCharCode(ch);
  }

  return str;
}

var isNumber = function isNumber(val) {
  return typeof val === 'number';
};

var JsonRpcProvider = /*#__PURE__*/function (_Provider) {
  _inheritsLoose(JsonRpcProvider, _Provider);

  /**
   * Establish a connection to a Sui Gateway endpoint
   *
   * @param endpoint URL to the Sui Gateway endpoint
   */
  function JsonRpcProvider(endpoint) {
    var _this;

    _this = _Provider.call(this) || this;
    _this.endpoint = endpoint;
    _this.client = new JsonRpcClient(endpoint);
    return _this;
  } // Objects


  var _proto = JsonRpcProvider.prototype;

  _proto.getOwnedObjectRefs =
  /*#__PURE__*/
  function () {
    var _getOwnedObjectRefs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(address) {
      var resp;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return this.client.requestWithType('sui_getOwnedObjects', [address], isGetOwnedObjectRefsResponse);

            case 3:
              resp = _context.sent;
              return _context.abrupt("return", resp.objects);

            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);
              throw new Error("Error fetching owned object refs: " + _context.t0 + " for address " + address);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 7]]);
    }));

    function getOwnedObjectRefs(_x) {
      return _getOwnedObjectRefs.apply(this, arguments);
    }

    return getOwnedObjectRefs;
  }();

  _proto.getObjectInfo = /*#__PURE__*/function () {
    var _getObjectInfo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(objectId) {
      var resp;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return this.client.requestWithType('sui_getObjectTypedInfo', [objectId], isGetObjectInfoResponse);

            case 3:
              resp = _context2.sent;
              return _context2.abrupt("return", transformGetObjectInfoResponse(resp));

            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](0);
              throw new Error("Error fetching object info: " + _context2.t0 + " for id " + objectId);

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 7]]);
    }));

    function getObjectInfo(_x2) {
      return _getObjectInfo.apply(this, arguments);
    }

    return getObjectInfo;
  }();

  _proto.getObjectInfoBatch = /*#__PURE__*/function () {
    var _getObjectInfoBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(objectIds) {
      var requests, responses;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              requests = objectIds.map(function (id) {
                return {
                  method: 'sui_getObjectTypedInfo',
                  args: [id]
                };
              });
              _context3.prev = 1;
              _context3.next = 4;
              return this.client.batchRequestWithType(requests, isGetObjectInfoResponse);

            case 4:
              responses = _context3.sent;
              return _context3.abrupt("return", responses.map(function (r) {
                return transformGetObjectInfoResponse(r);
              }));

            case 8:
              _context3.prev = 8;
              _context3.t0 = _context3["catch"](1);
              throw new Error("Error fetching object info: " + _context3.t0 + " for id " + objectIds);

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[1, 8]]);
    }));

    function getObjectInfoBatch(_x3) {
      return _getObjectInfoBatch.apply(this, arguments);
    }

    return getObjectInfoBatch;
  }() // Transactions
  ;

  _proto.getTransactionWithEffects =
  /*#__PURE__*/
  function () {
    var _getTransactionWithEffects = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(digest) {
      var resp;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              _context4.next = 3;
              return this.client.requestWithType('sui_getTransaction', [digest], isTransactionEffectsResponse);

            case 3:
              resp = _context4.sent;
              return _context4.abrupt("return", resp);

            case 7:
              _context4.prev = 7;
              _context4.t0 = _context4["catch"](0);
              throw new Error("Error getting transaction with effects: " + _context4.t0 + " for digest " + digest);

            case 10:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[0, 7]]);
    }));

    function getTransactionWithEffects(_x4) {
      return _getTransactionWithEffects.apply(this, arguments);
    }

    return getTransactionWithEffects;
  }();

  _proto.getTransactionWithEffectsBatch = /*#__PURE__*/function () {
    var _getTransactionWithEffectsBatch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(digests) {
      var requests, list;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              requests = digests.map(function (d) {
                return {
                  method: 'sui_getTransaction',
                  args: [d]
                };
              });
              _context5.prev = 1;
              _context5.next = 4;
              return this.client.batchRequestWithType(requests, isTransactionEffectsResponse);

            case 4:
              return _context5.abrupt("return", _context5.sent);

            case 7:
              _context5.prev = 7;
              _context5.t0 = _context5["catch"](1);
              list = digests.join(', ').substring(0, -2);
              throw new Error("Error getting transaction effects: " + _context5.t0 + " for digests [" + list + "]");

            case 11:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[1, 7]]);
    }));

    function getTransactionWithEffectsBatch(_x5) {
      return _getTransactionWithEffectsBatch.apply(this, arguments);
    }

    return getTransactionWithEffectsBatch;
  }();

  _proto.getTransaction = /*#__PURE__*/function () {
    var _getTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(digest) {
      var resp;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.prev = 0;
              _context6.next = 3;
              return this.client.requestWithType('sui_getTransaction', [digest], isTransactionEffectsResponse);

            case 3:
              resp = _context6.sent;
              return _context6.abrupt("return", resp.certificate);

            case 7:
              _context6.prev = 7;
              _context6.t0 = _context6["catch"](0);
              throw new Error("Error getting transaction: " + _context6.t0 + " for digest " + digest);

            case 10:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[0, 7]]);
    }));

    function getTransaction(_x6) {
      return _getTransaction.apply(this, arguments);
    }

    return getTransaction;
  }();

  _proto.executeTransaction = /*#__PURE__*/function () {
    var _executeTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(txn) {
      var resp;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.prev = 0;
              _context7.next = 3;
              return this.client.requestWithType('sui_executeTransaction', [txn], isTransactionResponse);

            case 3:
              resp = _context7.sent;
              return _context7.abrupt("return", resp);

            case 7:
              _context7.prev = 7;
              _context7.t0 = _context7["catch"](0);
              throw new Error("Error executing transaction: " + _context7.t0 + " for txn " + JSON.stringify(txn));

            case 10:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this, [[0, 7]]);
    }));

    function executeTransaction(_x7) {
      return _executeTransaction.apply(this, arguments);
    }

    return executeTransaction;
  }();

  _proto.getTotalTransactionNumber = /*#__PURE__*/function () {
    var _getTotalTransactionNumber = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8() {
      var resp;
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.prev = 0;
              _context8.next = 3;
              return this.client.requestWithType('sui_getTotalTransactionNumber', [], isNumber);

            case 3:
              resp = _context8.sent;
              return _context8.abrupt("return", resp);

            case 7:
              _context8.prev = 7;
              _context8.t0 = _context8["catch"](0);
              throw new Error("Error fetching total transaction number: " + _context8.t0);

            case 10:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this, [[0, 7]]);
    }));

    function getTotalTransactionNumber() {
      return _getTotalTransactionNumber.apply(this, arguments);
    }

    return getTotalTransactionNumber;
  }();

  _proto.getTransactionDigestsInRange = /*#__PURE__*/function () {
    var _getTransactionDigestsInRange = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(start, end) {
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.prev = 0;
              _context9.next = 3;
              return this.client.requestWithType('sui_getTransactionsInRange', [start, end], isGetTxnDigestsResponse);

            case 3:
              return _context9.abrupt("return", _context9.sent);

            case 6:
              _context9.prev = 6;
              _context9.t0 = _context9["catch"](0);
              throw new Error("Error fetching transaction digests in range: " + _context9.t0 + " for range " + start + "-" + end);

            case 9:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this, [[0, 6]]);
    }));

    function getTransactionDigestsInRange(_x8, _x9) {
      return _getTransactionDigestsInRange.apply(this, arguments);
    }

    return getTransactionDigestsInRange;
  }();

  _proto.getRecentTransactions = /*#__PURE__*/function () {
    var _getRecentTransactions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(count) {
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.prev = 0;
              _context10.next = 3;
              return this.client.requestWithType('sui_getRecentTransactions', [count], isGetTxnDigestsResponse);

            case 3:
              return _context10.abrupt("return", _context10.sent);

            case 6:
              _context10.prev = 6;
              _context10.t0 = _context10["catch"](0);
              throw new Error("Error fetching recent transactions: " + _context10.t0 + " for count " + count);

            case 9:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this, [[0, 6]]);
    }));

    function getRecentTransactions(_x10) {
      return _getRecentTransactions.apply(this, arguments);
    }

    return getRecentTransactions;
  }();

  return JsonRpcProvider;
}(Provider);

// Copyright (c) 2022, Mysten Labs, Inc.
var HexDataBuffer = /*#__PURE__*/function () {
  function HexDataBuffer(data) {
    if (typeof data === 'string') {
      this._data = new Uint8Array(Buffer$1.from(data, 'hex'));
    } else {
      this._data = data;
    }
  }

  var _proto = HexDataBuffer.prototype;

  _proto.getData = function getData() {
    return this._data;
  };

  _proto.getLength = function getLength() {
    return this._data.length;
  };

  _proto.toString = function toString() {
    return Buffer$1.from(this._data).toString('hex');
  };

  return HexDataBuffer;
}();

/**
 * This is a temporary implementation of the `TxnDataSerializer` class
 * that uses the Sui Gateway RPC API to serialize a transaction into BCS bytes.
 * This class will be deprecated once we support BCS serialization in TypeScript.
 * It is not safe to use this class in production because one cannot authenticate
 * the encoding.
 */

var RpcTxnDataSerializer = /*#__PURE__*/function () {
  /**
   * Establish a connection to a Sui Gateway endpoint
   *
   * @param endpoint URL to the Sui Gateway endpoint
   */
  function RpcTxnDataSerializer(endpoint) {
    this.client = new JsonRpcClient(endpoint);
  }

  var _proto = RpcTxnDataSerializer.prototype;

  _proto.newTransferCoin = /*#__PURE__*/function () {
    var _newTransferCoin = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(t) {
      var resp;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return this.client.requestWithType('sui_transferCoin', [t.signer, t.objectId, t.gasPayment, t.gasBudget, t.recipient], isTransactionBytes);

            case 3:
              resp = _context.sent;
              return _context.abrupt("return", new Base64DataBuffer(resp.tx_bytes));

            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);
              throw new Error("Error transferring coin: " + _context.t0);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 7]]);
    }));

    function newTransferCoin(_x) {
      return _newTransferCoin.apply(this, arguments);
    }

    return newTransferCoin;
  }();

  return RpcTxnDataSerializer;
}();

var VoidProvider = /*#__PURE__*/function (_Provider) {
  _inheritsLoose(VoidProvider, _Provider);

  function VoidProvider() {
    return _Provider.apply(this, arguments) || this;
  }

  var _proto = VoidProvider.prototype;

  // Objects
  _proto.getOwnedObjectRefs =
  /*#__PURE__*/
  function () {
    var _getOwnedObjectRefs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(_address) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              throw this.newError('getOwnedObjectRefs');

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getOwnedObjectRefs(_x) {
      return _getOwnedObjectRefs.apply(this, arguments);
    }

    return getOwnedObjectRefs;
  }();

  _proto.getObjectInfo = /*#__PURE__*/function () {
    var _getObjectInfo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(_objectId) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              throw this.newError('getObjectInfo');

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getObjectInfo(_x2) {
      return _getObjectInfo.apply(this, arguments);
    }

    return getObjectInfo;
  }() // Transactions
  ;

  _proto.getTransaction =
  /*#__PURE__*/
  function () {
    var _getTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(_digest) {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              throw this.newError('getTransaction');

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getTransaction(_x3) {
      return _getTransaction.apply(this, arguments);
    }

    return getTransaction;
  }();

  _proto.executeTransaction = /*#__PURE__*/function () {
    var _executeTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(_txn) {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              throw this.newError('executeTransaction');

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function executeTransaction(_x4) {
      return _executeTransaction.apply(this, arguments);
    }

    return executeTransaction;
  }();

  _proto.getTotalTransactionNumber = /*#__PURE__*/function () {
    var _getTotalTransactionNumber = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              throw this.newError('getTotalTransactionNumber');

            case 1:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getTotalTransactionNumber() {
      return _getTotalTransactionNumber.apply(this, arguments);
    }

    return getTotalTransactionNumber;
  }();

  _proto.getTransactionDigestsInRange = /*#__PURE__*/function () {
    var _getTransactionDigestsInRange = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(_start, _end) {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              throw this.newError('getTransactionDigestsInRange');

            case 1:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function getTransactionDigestsInRange(_x5, _x6) {
      return _getTransactionDigestsInRange.apply(this, arguments);
    }

    return getTransactionDigestsInRange;
  }();

  _proto.getRecentTransactions = /*#__PURE__*/function () {
    var _getRecentTransactions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(_count) {
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              throw this.newError('getRecentTransactions');

            case 1:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function getRecentTransactions(_x7) {
      return _getRecentTransactions.apply(this, arguments);
    }

    return getRecentTransactions;
  }();

  _proto.newError = function newError(operation) {
    return new Error("Please use a valid provider for " + operation);
  };

  return VoidProvider;
}(Provider);

// Exported Abstracts

var SignerWithProvider = /*#__PURE__*/function () {
  ///////////////////
  // Sub-classes MAY override these
  function SignerWithProvider(provider, serializer) {
    this.provider = provider || new VoidProvider();
    var endpoint = '';

    if (this.provider instanceof JsonRpcProvider) {
      endpoint = this.provider.endpoint;
    }

    this.serializer = serializer || new RpcTxnDataSerializer(endpoint);
  }
  /**
   * Sign a transaction and submit to the Gateway for execution
   *
   * @param txBytes BCS serialised TransactionData bytes
   */


  var _proto = SignerWithProvider.prototype;

  _proto.signAndExecuteTransaction =
  /*#__PURE__*/
  function () {
    var _signAndExecuteTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(txBytes) {
      var sig;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.signData(txBytes);

            case 2:
              sig = _context.sent;
              _context.next = 5;
              return this.provider.executeTransaction({
                tx_bytes: txBytes.toString(),
                signature: sig.signature.toString(),
                pub_key: sig.pubKey.toString()
              });

            case 5:
              return _context.abrupt("return", _context.sent);

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function signAndExecuteTransaction(_x) {
      return _signAndExecuteTransaction.apply(this, arguments);
    }

    return signAndExecuteTransaction;
  }()
  /**
   * Serialize and Sign a `TransferCoin` transaction and submit to the Gateway for execution
   */
  ;

  _proto.transferCoin =
  /*#__PURE__*/
  function () {
    var _transferCoin = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(transaction) {
      var txBytes;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.serializer.newTransferCoin(transaction);

            case 2:
              txBytes = _context2.sent;
              _context2.next = 5;
              return this.signAndExecuteTransaction(txBytes);

            case 5:
              return _context2.abrupt("return", _context2.sent);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function transferCoin(_x2) {
      return _transferCoin.apply(this, arguments);
    }

    return transferCoin;
  }();

  return SignerWithProvider;
}();

var RawSigner = /*#__PURE__*/function (_SignerWithProvider) {
  _inheritsLoose(RawSigner, _SignerWithProvider);

  function RawSigner(keypair, provider, serializer) {
    var _this;

    _this = _SignerWithProvider.call(this, provider, serializer) || this;
    _this.keypair = keypair;
    return _this;
  }

  var _proto = RawSigner.prototype;

  _proto.getAddress = /*#__PURE__*/function () {
    var _getAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              throw this.keypair.getPublicKey().toSuiAddress();

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getAddress() {
      return _getAddress.apply(this, arguments);
    }

    return getAddress;
  }();

  _proto.signData = /*#__PURE__*/function () {
    var _signData = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(data) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", {
                signature: this.keypair.signData(data),
                pubKey: this.keypair.getPublicKey()
              });

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function signData(_x) {
      return _signData.apply(this, arguments);
    }

    return signData;
  }();

  _proto.connect = function connect(provider) {
    return new RawSigner(this.keypair, provider);
  };

  return RawSigner;
}(SignerWithProvider);

// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

/* ---------------------------- Helper functions ---------------------------- */
function getSingleTransactionKind(data) {
  return 'Single' in data.kind ? data.kind.Single : undefined;
}
function getTransferTransaction(data) {
  var tx = getSingleTransactionKind(data);
  return tx && 'Transfer' in tx ? tx.Transfer : undefined;
}
function getPublishTransaction(data) {
  var tx = getSingleTransactionKind(data);
  return tx && 'Publish' in tx ? tx.Publish : undefined;
}
function getMoveCallTransaction(data) {
  var tx = getSingleTransactionKind(data);
  return tx && 'Call' in tx ? tx.Call : undefined;
}
function getTransactionKind(data) {
  var tx = getSingleTransactionKind(data);
  return tx && Object.keys(tx)[0];
}
function getExecutionStatusType(data) {
  return Object.keys(data)[0];
}
function getGasSummary(data) {
  var details = getExecutionDetails(data);
  return details.gas_cost;
}
function getTotalGasUsed(data) {
  var gasSummary = getGasSummary(data);

  if (gasSummary) {
    return gasSummary.computation_cost + gasSummary.storage_cost - gasSummary.storage_rebate;
  }

  return 0;
}
function getExecutionDetails(data) {
  if ('Success' in data) {
    return data.Success;
  } else if ('Failure' in data) {
    return data.Failure;
  }

  console.error('Unrecognized ExecutionStatus:', data);
  return data[Object.keys(data)[0]];
}

/**
 * Class used for reading BCS data chunk by chunk. Meant to be used
 * by some wrapper, which will make sure that data is valid and is
 * matching the desired format.
 *
 * @example
 * // data for this example is:
 * // { a: u8, b: u32, c: bool, d: u64 }
 *
 * let reader = new BcsReader("647f1a060001ffffe7890423c78a050102030405");
 * let field1 = reader.read8();
 * let field2 = reader.read32();
 * let field3 = reader.read8() == '1'; // bool
 * let field4 = reader.read64();
 * // ....
 *
 * Reading vectors is another deal in BCS. To read a vector, you first need to read
 * its length using {@link readULEB}. Here's an example:
 * @example
 * // data encoded: { field: [1, 2, 3, 4, 5] }
 * let reader = new BcsReader("050102030405");
 * let vec_length = reader.readULEB();
 * let elements = [];
 * for (let i = 0; i < vec_length; i++) {
 *   elements.push(reader.read8());
 * }
 * console.log(elements); // [1,2,3,4,5]
 *
 * @param {String} data HEX-encoded data (serialized BCS)
 */

var BcsReader = /*#__PURE__*/function () {
  /**
   * @param {Uint8Array} data Data to use as a buffer.
   */
  function BcsReader(data) {
    this.bytePosition = 0;
    this.dataView = new DataView(data.buffer);
  }
  /**
   * Shift current cursor position by `bytes`.
   *
   * @param {Number} bytes Number of bytes to
   * @returns {this} Self for possible chaining.
   */


  var _proto = BcsReader.prototype;

  _proto.shift = function shift(bytes) {
    this.bytePosition += bytes;
    return this;
  }
  /**
   * Read U8 value from the buffer and shift cursor by 1.
   * @returns
   */
  ;

  _proto.read8 = function read8() {
    var value = this.dataView.getUint8(this.bytePosition);
    this.shift(1);
    return new BN(value, 10);
  }
  /**
   * Read U16 value from the buffer and shift cursor by 2.
   * @returns
   */
  ;

  _proto.read16 = function read16() {
    var value = this.dataView.getUint16(this.bytePosition, true);
    this.shift(2);
    return new BN(value, 10);
  }
  /**
   * Read U32 value from the buffer and shift cursor by 4.
   * @returns
   */
  ;

  _proto.read32 = function read32() {
    var value = this.dataView.getUint32(this.bytePosition, true);
    this.shift(4);
    return new BN(value, 10);
  }
  /**
   * Read U64 value from the buffer and shift cursor by 8.
   * @returns
   */
  ;

  _proto.read64 = function read64() {
    var value1 = this.read32();
    var value2 = this.read32();
    var result = value2.toString(16) + value1.toString(16).padStart(8, '0');
    return new BN(result, 16);
  }
  /**
   * Read U128 value from the buffer and shift cursor by 16.
   * @returns
   */
  ;

  _proto.read128 = function read128() {
    var value1 = this.read64();
    var value2 = this.read64();
    var result = value2.toString(16) + value1.toString(16).padStart(8, '0');
    return new BN(result, 16);
  }
  /**
   * Read `num` number of bytes from the buffer and shift cursor by `num`.
   * @param num Number of bytes to read.
   * @returns Selected Buffer.
   */
  ;

  _proto.readBytes = function readBytes(num) {
    var start = this.bytePosition + this.dataView.byteOffset;
    var value = new Uint8Array(this.dataView.buffer, start, num);
    this.shift(num);
    return value;
  }
  /**
   * Read ULEB value - an integer of varying size. Used for enum indexes and
   * vector lengths.
   * @returns {Number} The ULEB value.
   */
  ;

  _proto.readULEB = function readULEB() {
    var start = this.bytePosition + this.dataView.byteOffset;
    var buffer = new Uint8Array(this.dataView.buffer, start);

    var _ulebDecode = ulebDecode(buffer),
        value = _ulebDecode.value,
        length = _ulebDecode.length;

    this.shift(length);
    return value;
  }
  /**
   * Read a BCS vector: read a length and then apply function `cb` X times
   * where X is the length of the vector, defined as ULEB in BCS bytes.
   * @param cb Callback to process elements of vector.
   * @returns {Array<Any>} Array of the resulting values, returned by callback.
   */
  ;

  _proto.readVec = function readVec(cb) {
    var length = this.readULEB();
    var result = [];

    for (var i = 0; i < length; i++) {
      result.push(cb(this, i, length));
    }

    return result;
  };

  return BcsReader;
}();
/**
 * Class used to write BCS data into a buffer. Initializer requires
 * some size of a buffer to init; default value for this buffer is 1KB.
 *
 * Most methods are chainable, so it is possible to write them in one go.
 *
 * @example
 * let serialized = new BcsWriter()
 *   .write8(10)
 *   .write32(1000000)
 *   .write64(10000001000000)
 *   .hex();
 */

var BcsWriter = /*#__PURE__*/function () {
  /**
   * @param {Number} [size=1024] Size of the buffer to reserve for serialization.
   */
  function BcsWriter(size) {
    if (size === void 0) {
      size = 1024;
    }

    this.bytePosition = 0;
    this.dataView = new DataView(new ArrayBuffer(size));
  }
  /**
   * Unify argument types by converting them to BN.
   */


  BcsWriter.toBN = function toBN(number) {
    switch (typeof number) {
      case 'bigint':
        return new BN(number.toString());

      default:
        return new BN(number);
    }
  }
  /**
   * Shift current cursor position by `bytes`.
   *
   * @param {Number} bytes Number of bytes to
   * @returns {this} Self for possible chaining.
   */
  ;

  var _proto2 = BcsWriter.prototype;

  _proto2.shift = function shift(bytes) {
    this.bytePosition += bytes;
    return this;
  }
  /**
   * Write a U8 value into a buffer and shift cursor position by 1.
   * @param {Number} value Value to write.
   * @returns {this}
   */
  ;

  _proto2.write8 = function write8(value) {
    this.dataView.setUint8(this.bytePosition, +BcsWriter.toBN(value));
    return this.shift(1);
  }
  /**
   * Write a U16 value into a buffer and shift cursor position by 2.
   * @param {Number} value Value to write.
   * @returns {this}
   */
  ;

  _proto2.write16 = function write16(value) {
    this.dataView.setUint16(this.bytePosition, +BcsWriter.toBN(value), true);
    return this.shift(2);
  }
  /**
   * Write a U32 value into a buffer and shift cursor position by 4.
   * @param {Number} value Value to write.
   * @returns {this}
   */
  ;

  _proto2.write32 = function write32(value) {
    this.dataView.setUint32(this.bytePosition, +BcsWriter.toBN(value), true);
    return this.shift(4);
  }
  /**
   * Write a U64 value into a buffer and shift cursor position by 8.
   * @param {bigint} value Value to write.
   * @returns {this}
   */
  ;

  _proto2.write64 = function write64(value) {
    var _this = this;

    BcsWriter.toBN(value).toArray('le', 8).forEach(function (el) {
      return _this.write8(el);
    });
    return this;
  }
  /**
   * Write a U128 value into a buffer and shift cursor position by 16.
   *
   * @unimplemented
   * @param {bigint} value Value to write.
   * @returns {this}
   */
  ;

  _proto2.write128 = function write128(value) {
    var _this2 = this;

    BcsWriter.toBN(value).toArray('le', 16).forEach(function (el) {
      return _this2.write8(el);
    });
    return this;
  }
  /**
   * Write a ULEB value into a buffer and shift cursor position by number of bytes
   * written.
   * @param {Number} value Value to write.
   * @returns {this}
   */
  ;

  _proto2.writeULEB = function writeULEB(value) {
    var _this3 = this;

    ulebEncode(value).forEach(function (el) {
      return _this3.write8(el);
    });
    return this;
  }
  /**
   * Write a vector into a buffer by first writing the vector length and then calling
   * a callback on each passed value.
   *
   * @param {Array<Any>} vector Array of elements to write.
   * @param {WriteVecCb} cb Callback to call on each element of the vector.
   * @returns {this}
   */
  ;

  _proto2.writeVec = function writeVec(vector, cb) {
    var _this4 = this;

    this.writeULEB(vector.length);
    Array.from(vector).forEach(function (el, i) {
      return cb(_this4, el, i, vector.length);
    });
    return this;
  }
  /**
   * Get underlying buffer taking only value bytes (in case initial buffer size was bigger).
   * @returns {Uint8Array} Resulting BCS.
   */
  ;

  _proto2.toBytes = function toBytes() {
    return new Uint8Array(this.dataView.buffer.slice(0, this.bytePosition));
  }
  /**
   * Represent data as 'hex' or 'base64'
   * @param encoding Encoding to use: 'base64' or 'hex'
   */
  ;

  _proto2.toString = function toString(encoding) {
    switch (encoding) {
      case 'base64':
        return new Base64DataBuffer(this.toBytes()).toString();

      case 'hex':
        return new HexDataBuffer(this.toBytes()).toString();

      default:
        throw new Error('Unsupported encoding, supported values are: base64, hex');
    }
  };

  return BcsWriter;
}(); // Helper utility: write number as an ULEB array.
// Original code is taken from: https://www.npmjs.com/package/uleb128 (no longer exists)

function ulebEncode(num) {
  var arr = [];
  var len = 0;

  if (num === 0) {
    return [0];
  }

  while (num > 0) {
    arr[len] = num & 0x7f;

    if (num >>= 7) {
      arr[len] |= 0x80;
    }

    len += 1;
  }

  return arr;
} // Helper utility: decode ULEB as an array of numbers.
// Original code is taken from: https://www.npmjs.com/package/uleb128 (no longer exists)


function ulebDecode(arr) {
  var total = 0;
  var shift = 0;
  var len = 0;

  while (true) {
    var _byte = arr[len];
    len += 1;
    total |= (_byte & 0x7f) << shift;

    if ((_byte & 0x80) === 0) {
      break;
    }

    shift += 7;
  }

  return {
    value: total,
    length: len
  };
}
/**
 * BCS implementation for Move types and few additional built-ins.
 */


var BCS = /*#__PURE__*/function () {
  function BCS() {}

  /**
   * Serialize data into BCS.
   *
   * @example
   * BCS.registerVectorType('vector<u8>', 'u8');
   *
   * let serialized = BCS
   *   .set('vector<u8>', [1,2,3,4,5,6])
   *   .toBytes();
   *
   * console.assert(BCS.util.toHex(serialized) === '06010203040506');
   *
   * @param type Name of the type to serialize (must be registered).
   * @param data Data to serialize.
   * @param size Serialization buffer size. Default 1024 = 1KB.
   * @return A BCS reader instance. Usually you'd want to call `.toBytes()`
   */
  BCS.set = function set(type, data, size) {
    if (size === void 0) {
      size = 1024;
    }

    return this.getTypeInterface(type).encode(data, size);
  }
  /**
   * Deserialize BCS into a JS type.
   *
   * @example
   * // use util to form an Uint8Array buffer
   * let data = BCS.de(BCS.U32, new Uint8Array([255, 255, 255, 255]));
   * console.assert(data.toString() == '4294967295');
   *
   * @param type Name of the type to deserialize (must be registered).
   * @param data Data to deserialize.
   * @return Deserialized data.
   */
  ;

  BCS.de = function de(type, data) {
    return this.getTypeInterface(type).decode(data);
  }
  /**
   * Check whether a TypeInterface has been loaded for the `Type`
   * @param type Name of the type to check.
   * @returns
   */
  ;

  BCS.hasType = function hasType(type) {
    return this.types.has(type);
  }
  /**
   * Method to register new types for BCS internal representation.
   * For each registered type 2 callbacks must be specified and one is optional:
   *
   * - encodeCb(writer, data) - write a way to serialize data with BcsWriter;
   * - decodeCb(reader) - write a way to deserialize data with BcsReader;
   * - validateCb(data) - validate data - either return bool or throw an error
   *
   * @example
   * // our type would be a string that consists only of numbers
   * BCS.registerType('number_string',
   *    (writer, data) => writer.writeVec(data, (w, el) => w.write8(el)),
   *    (reader) => reader.readVec((r) => r.read8()).join(''), // read each value as u8
   *    (value) => /[0-9]+/.test(value) // test that it has at least one digit
   * );
   * console.log(Array.from(BCS.set('number_string', '12345').toBytes()) == [5,1,2,3,4,5]);
   *
   * @param name
   * @param encodeCb Callback to encode a value.
   * @param decodeCb Callback to decode a value.
   * @param validateCb Optional validator Callback to check type before serialization.
   */
  ;

  BCS.registerType = function registerType(name, encodeCb, decodeCb, validateCb) {
    if (validateCb === void 0) {
      validateCb = function validateCb() {
        return true;
      };
    }

    this.types.set(name, {
      encode: function encode(data, size) {
        if (size === void 0) {
          size = 1024;
        }

        return this._encodeRaw(new BcsWriter(size), data);
      },
      decode: function decode(data) {
        return this._decodeRaw(new BcsReader(data));
      },
      // these methods should always be used with caution as they require pre-defined
      // reader and writer and mainly exist to allow multi-field (de)serialization;
      _encodeRaw: function _encodeRaw(writer, data) {
        if (validateCb(data)) {
          return encodeCb(writer, data);
        } else {
          throw new Error("Validation failed for type " + name + ", data: " + data);
        }
      },
      _decodeRaw: function _decodeRaw(reader) {
        return decodeCb(reader);
      }
    });
    return this;
  }
  /**
   * Register an address type which is a sequence of U8s of specified length.
   * @example
   * BCS.registerAddressType('address', 20);
   * let addr = BCS.de('address', 'ca27601ec5d915dd40d42e36c395d4a156b24026');
   *
   * @param name Name of the address type.
   * @param length Byte length of the address.
   * @returns
   */
  ;

  BCS.registerAddressType = function registerAddressType(name, length) {
    return this.registerType(name, function (writer, data) {
      return new HexDataBuffer(data).getData().reduce(function (writer, el) {
        return writer.write8(el);
      }, writer);
    }, function (reader) {
      return new HexDataBuffer(reader.readBytes(length)).toString();
    });
  }
  /**
   * Register custom vector type inside the BCS.
   *
   * @example
   * BCS.registerVectorType('vector<u8>', 'u8');
   * let array = BCS.de('vector<u8>', new Uint8Array([6,1,2,3,4,5,6])); // [1,2,3,4,5,6];
   * let again = BCS.set('vector<u8>', [1,2,3,4,5,6]).toBytes();
   *
   * @param name Name of the type to register.
   * @param elementType Name of the inner type of the vector.
   * @return Returns self for chaining.
   */
  ;

  BCS.registerVectorType = function registerVectorType(name, elementType) {
    // OMITTING SAFETY CHECK TO ALLOW RECURSIVE DEFINITIONS
    // if (!BCS.hasType(elementType)) {
    //     throw new Error(`Type ${elementType} is not registered`);
    // }
    return this.registerType(name, function (writer, data) {
      return writer.writeVec(data, function (writer, el) {
        return BCS.getTypeInterface(elementType)._encodeRaw(writer, el);
      });
    }, function (reader) {
      return reader.readVec(function (reader) {
        return BCS.getTypeInterface(elementType)._decodeRaw(reader);
      });
    });
  }
  /**
   * Safe method to register a custom Move struct. The first argument is a name of the
   * struct which is only used on the FrontEnd and has no affect on serialization results,
   * and the second is a struct description passed as an Object.
   *
   * The description object MUST have the same order on all of the platforms (ie in Move
   * or in Rust).
   *
   * @example
   * // Move / Rust struct
   * // struct Coin {
   * //   value: u64,
   * //   owner: vector<u8>, // name // Vec<u8> in Rust
   * //   is_locked: bool,
   * // }
   *
   * BCS.registerStructType('Coin', {
   *   value: BCS.U64,
   *   owner: BCS.STRING,
   *   is_locked: BCS.BOOL
   * });
   *
   * // Created in Rust with diem/bcs
   * // let rust_bcs_str = '80d1b105600000000e4269672057616c6c65742047757900';
   * let rust_bcs_str = [ // using an Array here as BCS works with Uint8Buffer
   *  128, 209, 177,   5,  96,  0,  0,
   *    0,  14,  66, 105, 103, 32, 87,
   *   97, 108, 108, 101, 116, 32, 71,
   *  117, 121,   0
   * ];
   *
   * // Let's encode the value as well
   * let test_set = BCS.set('Coin', {
   *   owner: 'Big Wallet Guy',
   *   value: '412412400000',
   *   is_locked: false,
   * });
   *
   * console.assert(Array.from(test_set.toBytes()) === rust_bcs_str, 'Whoopsie, result mismatch');
   *
   * @param name Name of the type to register.
   * @param fields Fields of the struct. Must be in the correct order.
   * @return Returns BCS for chaining.
   */
  ;

  BCS.registerStructType = function registerStructType(name, fields) {
    var struct = Object.freeze(fields); // Make sure the order doesn't get changed
    // IMPORTANT: we need to store canonical order of fields for each registered
    // struct so we maintain it and allow developers to use any field ordering in
    // their code (and not cause mismatches based on field order).

    var canonicalOrder = Object.keys(struct); // Make sure all the types in the fields description are already known
    // and that all the field types are strings.
    // OMITTING this check to allow recursive definitions and dynamic typing.
    // for (let type of Object.values(struct)) {
    //         throw new Error(`Type ${type} is not registered`);
    //     }
    // }

    return this.registerType(name, function (writer, data) {
      for (var _iterator = _createForOfIteratorHelperLoose(canonicalOrder), _step; !(_step = _iterator()).done;) {
        var key = _step.value;

        BCS.getTypeInterface(struct[key])._encodeRaw(writer, data[key]);
      }

      return writer;
    }, function (reader) {
      var result = {};

      for (var _iterator2 = _createForOfIteratorHelperLoose(canonicalOrder), _step2; !(_step2 = _iterator2()).done;) {
        var key = _step2.value;
        result[key] = BCS.getTypeInterface(struct[key])._decodeRaw(reader);
      }

      return result;
    });
  }
  /**
   * Safe method to register custom enum type where each invariant holds the value of another type.
   * @example
   * BCS.registerStructType('Coin', { value: 'u64' });
   * BCS.registerVectorType('vector<Coin>', 'Coin');
   * BCS.registerEnumType('MyEnum', {
   *  single: 'Coin',
   *  multi: 'vector<Coin>'
   * });
   *
   * let example1 = Buffer.from('AICWmAAAAAAA', 'base64');
   * let example2 = Buffer.from('AQIBAAAAAAAAAAIAAAAAAAAA', 'base64');
   *
   * console.log(
   *  BCS.de('MyEnum', new Uint8Array(example1)), // { single: { value: 10000000 } }
   *  BCS.de('MyEnum', new Uint8Array(example2))  // { multi: [ { value: 1 }, { value: 2 } ] }
   * }
   *
   * // and serialization
   * BCS.set('MyEnum', { single: { value: 10000000 } }).toBytes();
   * BCS.set('MyEnum', { multi: [ { value: 1 }, { value: 2 } ] });
   *
   * @param name
   * @param variants
   */
  ;

  BCS.registerEnumType = function registerEnumType(name, variants) {
    var struct = Object.freeze(variants); // Make sure the order doesn't get changed
    // IMPORTANT: enum is an ordered type and we have to preserve ordering in BCS

    var canonicalOrder = Object.keys(struct);
    return this.registerType(name, function (writer, data) {
      var key = Object.keys(data)[0];

      if (key === undefined) {
        throw new Error("Unknown invariant of the enum " + name);
      }

      var orderByte = canonicalOrder.indexOf(key);

      if (orderByte === -1) {
        throw new Error("Unknown invariant of the enum " + name + ", allowed values: " + canonicalOrder);
      }

      var invariant = canonicalOrder[orderByte];
      var invariantType = struct[invariant];
      writer.write8(orderByte); // write order byte
      // Allow empty Enum values!

      return invariantType !== null ? BCS.getTypeInterface(invariantType)._encodeRaw(writer, data[key]) : writer;
    }, function (reader) {
      var _ref;

      var orderByte = reader.readULEB();
      var invariant = canonicalOrder[orderByte];
      var invariantType = struct[invariant];

      if (orderByte === -1) {
        throw new Error("Decoding type mismatch, expected enum " + name + " invariant index, received " + orderByte);
      }

      return _ref = {}, _ref[invariant] = invariantType !== null ? BCS.getTypeInterface(invariantType)._decodeRaw(reader) : true, _ref;
    });
  };

  BCS.getTypeInterface = function getTypeInterface(type) {
    var typeInterface = BCS.types.get(type);

    if (typeInterface === undefined) {
      throw new Error("Type " + type + " is not registered");
    }

    return typeInterface;
  };

  return BCS;
}(); // Prefefined types constants

BCS.U8 = 'u8';
BCS.U32 = 'u32';
BCS.U64 = 'u64';
BCS.U128 = 'u128';
BCS.BOOL = 'bool';
BCS.VECTOR = 'vector';
BCS.ADDRESS = 'address';
BCS.STRING = 'string';
BCS.types = /*#__PURE__*/new Map();

(function registerPrimitives() {
  BCS.registerType(BCS.U8, function (writer, data) {
    return writer.write8(data);
  }, function (reader) {
    return reader.read8();
  }, function (u8) {
    return u8 < 256;
  });
  BCS.registerType(BCS.U32, function (writer, data) {
    return writer.write32(data);
  }, function (reader) {
    return reader.read32();
  }, function (u32) {
    return u32 < 4294967296;
  });
  BCS.registerType(BCS.U64, function (writer, data) {
    return writer.write64(data);
  }, function (reader) {
    return reader.read64();
  }, function (_u64) {
    return true;
  });
  BCS.registerType(BCS.U128, function (writer, data) {
    return writer.write128(data);
  }, function (reader) {
    return reader.read128();
  }, function (_u128) {
    return true;
  });
  BCS.registerType(BCS.BOOL, function (writer, data) {
    return writer.write8(data);
  }, function (reader) {
    return reader.read8().toString(10) == '1';
  }, function (_bool) {
    return true;
  });
  BCS.registerType(BCS.STRING, function (writer, data) {
    return writer.writeVec(Array.from(data), function (writer, el) {
      return writer.write8(el.charCodeAt(0));
    });
  }, function (reader) {
    return reader.readVec(function (reader) {
      return reader.read8();
    }).map(function (el) {
      return String.fromCharCode(el);
    }).join('');
  }, function (str) {
    return /^[\x00-\x7F]*$/.test(str);
  });
})();

var index = {
  __proto__: null,
  BcsReader: BcsReader,
  BcsWriter: BcsWriter,
  BCS: BCS
};

export { index as BCS, Base64DataBuffer, Ed25519Keypair, HexDataBuffer, JsonRpcProvider, PUBLIC_KEY_SIZE, Provider, PublicKey, RawSigner, RpcTxnDataSerializer, SignerWithProvider, getExecutionDetails, getExecutionStatusType, getGasSummary, getMoveCallTransaction, getMovePackageContent, getObjectContent, getObjectExistsResponse, getObjectType, getPublishTransaction, getSingleTransactionKind, getTotalGasUsed, getTransactionKind, getTransferTransaction, isAuthorityName, isAuthorityQuorumSignInfo, isAuthoritySignature, isCertifiedTransaction, isEd25519KeypairData, isEmptySignInfo, isEpochId, isEvent, isExecutionStatus, isExecutionStatusDetail, isExecutionStatusType, isGasCostSummary, isGatewayTxSeqNumber, isGetObjectInfoResponse, isGetOwnedObjectRefsResponse, isGetTxnDigestsResponse, isKeypair, isMoveCall, isMoveCallArg, isMoveModulePublish, isMovePackageContent, isMoveTypeTag, isObjectContent, isObjectContentField, isObjectContentFields, isObjectDigest, isObjectExistsInfo, isObjectId, isObjectNotExistsInfo, isObjectOwner, isObjectRef, isObjectStatus, isObjectType, isOwnedObjectRef, isPublicKeyData$1 as isPublicKeyData, isPublicKeyInitData, isRawAuthoritySignInfo, isRawObjectRef, isSequenceNumber, isSignedTransaction, isSingleTransactionKind, isStructTag, isSuiAddress, isSuiObject, isTransactionBytes, isTransactionData, isTransactionDigest, isTransactionEffects, isTransactionEffectsResponse, isTransactionKind, isTransactionKindName, isTransactionResponse, isTransfer, isTransferCoinTransaction, isTxnDataSerializer };
//# sourceMappingURL=sui.js.esm.js.map
