import { ObjectOwner, SuiAddress, TransactionDigest } from './common';
import { ObjectId, RawObjectRef } from './objects';
export declare type Transfer = {
    recipient: string;
    object_ref: RawObjectRef;
};
export declare type RawAuthoritySignInfo = [AuthorityName, AuthoritySignature];
export declare type TransactionKindName = 'Transfer' | 'Publish' | 'Call';
export declare type SingleTransactionKind = {
    Transfer: Transfer;
} | {
    Publish: MoveModulePublish;
} | {
    Call: MoveCall;
};
export declare type TransactionKind = {
    Single: SingleTransactionKind;
} | {
    Batch: SingleTransactionKind[];
};
export declare type TransactionData = {
    kind: TransactionKind;
    sender: string;
    gas_payment: RawObjectRef;
    gas_budget: number;
};
export declare type EpochId = number;
export declare type AuthorityQuorumSignInfo = {
    epoch: EpochId;
    signatures: RawAuthoritySignInfo[];
};
export declare type CertifiedTransaction = {
    data: TransactionData;
    tx_signature: string;
    auth_sign_info: AuthorityQuorumSignInfo;
};
export declare type GasCostSummary = {
    computation_cost: number;
    storage_cost: number;
    storage_rebate: number;
};
export declare type ExecutionStatusType = 'Success' | 'Failure';
export declare type ExecutionStatus = {
    Success: ExecutionStatusDetail;
} | {
    Failure: ExecutionStatusDetail;
};
export declare type ExecutionStatusDetail = {
    gas_cost: GasCostSummary;
    error?: any;
};
export declare type OwnedObjectRef = [RawObjectRef, ObjectOwner];
export declare type TransactionEffects = {
    status: ExecutionStatus;
    shared_objects: RawObjectRef[];
    transaction_digest: TransactionDigest;
    created: OwnedObjectRef[];
    mutated: OwnedObjectRef[];
    unwrapped: OwnedObjectRef[];
    deleted: RawObjectRef[];
    wrapped: RawObjectRef[];
    gas_object: OwnedObjectRef;
    events: Event[];
    dependencies: TransactionDigest[];
};
export declare type TransactionEffectsResponse = {
    certificate: CertifiedTransaction;
    effects: TransactionEffects;
};
export declare type GatewayTxSeqNumber = number;
export declare type GetTxnDigestsResponse = [GatewayTxSeqNumber, TransactionDigest][];
export declare type MoveModulePublish = {
    modules: any;
};
export declare type Event = {
    type_: StructTag;
    contents: string;
};
export declare type StructTag = {
    address: SuiAddress;
    module: string;
    name: string;
    type_args: MoveTypeTag[];
};
export declare type MoveTypeTag = 'bool' | 'u8' | 'u64' | 'u128' | 'address' | 'signer' | {
    vector: MoveTypeTag[];
} | {
    struct: StructTag;
};
export declare type MoveCall = {
    package: RawObjectRef;
    module: string;
    function: string;
    type_arguments: MoveTypeTag[];
    arguments: MoveCallArg[];
};
export declare type MoveCallArg = {
    Pure: number[];
} | {
    ImmOrOwnedObject: RawObjectRef;
} | {
    SharedObject: ObjectId;
};
export declare type EmptySignInfo = object;
export declare type AuthorityName = string;
export declare type AuthoritySignature = string;
export declare type TransactionBytes = {
    tx_bytes: string;
};
export declare type TransactionResponse = {
    EffectResponse: TransactionEffectsResponse;
};
export declare type SignedTransaction = {
    tx_bytes: string;
    signature: string;
    pub_key: string;
};
export declare function getSingleTransactionKind(data: TransactionData): SingleTransactionKind | undefined;
export declare function getTransferTransaction(data: TransactionData): Transfer | undefined;
export declare function getPublishTransaction(data: TransactionData): MoveModulePublish | undefined;
export declare function getMoveCallTransaction(data: TransactionData): MoveCall | undefined;
export declare function getTransactionKind(data: TransactionData): TransactionKindName | undefined;
export declare function getExecutionStatusType(data: ExecutionStatus): ExecutionStatusType;
export declare function getGasSummary(data: ExecutionStatus): GasCostSummary | undefined;
export declare function getTotalGasUsed(data: ExecutionStatus): number;
export declare function getExecutionDetails(data: ExecutionStatus): ExecutionStatusDetail;
