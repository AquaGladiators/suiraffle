import { Provider } from './provider';
import { CertifiedTransaction, GatewayTxSeqNumber, GetTxnDigestsResponse, GetObjectInfoResponse, ObjectRef, TransactionDigest, TransactionEffectsResponse, SignedTransaction, TransactionResponse } from '../types';
export declare class JsonRpcProvider extends Provider {
    endpoint: string;
    private client;
    /**
     * Establish a connection to a Sui Gateway endpoint
     *
     * @param endpoint URL to the Sui Gateway endpoint
     */
    constructor(endpoint: string);
    getOwnedObjectRefs(address: string): Promise<ObjectRef[]>;
    getObjectInfo(objectId: string): Promise<GetObjectInfoResponse>;
    getObjectInfoBatch(objectIds: string[]): Promise<GetObjectInfoResponse[]>;
    getTransactionWithEffects(digest: TransactionDigest): Promise<TransactionEffectsResponse>;
    getTransactionWithEffectsBatch(digests: TransactionDigest[]): Promise<TransactionEffectsResponse[]>;
    getTransaction(digest: TransactionDigest): Promise<CertifiedTransaction>;
    executeTransaction(txn: SignedTransaction): Promise<TransactionResponse>;
    getTotalTransactionNumber(): Promise<number>;
    getTransactionDigestsInRange(start: GatewayTxSeqNumber, end: GatewayTxSeqNumber): Promise<GetTxnDigestsResponse>;
    getRecentTransactions(count: number): Promise<GetTxnDigestsResponse>;
}
